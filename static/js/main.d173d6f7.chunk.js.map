{"version":3,"sources":["components/styles/theme.ts","components/context/AnimationDoneContext.tsx","components/styles/StyledNavBar/StyledNavbar.tsx","components/styles/StyledNavLink/StyledNavLink.tsx","hooks/useCurrentPath.tsx","components/containers/navbar/Navbar.tsx","graphql/queries.ts","helpers/lazyLoading.ts","App.tsx","reportWebVitals.ts","graphql/client.ts","components/context/AnimationDoneContextProvider.tsx","index.tsx"],"names":["Theme","colors","black","orange","white","blue","purple","pink","green","fonts","monaco","roboto","AnimationDoneContext","createContext","state","setState","StyledNavbar","styled","nav","props","backgroundColor","theme","fontColor","StyledNavLink","div","isActive","useCurrentPathname","useLocation","pathname","navLinks","url","label","isActiveColor","Navbar","currentURL","useCurrentPathName","id","role","map","link","to","REPOS_QUERY","gql","LazyBlog","lazy","LazyAbout","LazyBlogPost","LazyProjects","App","useState","jsonData","setJsonData","useQuery","variables","firstRepo","firstLang","data","error","loading","getJsonData","a","fetch","headers","Accept","response","json","then","jsonProjects","useEffect","projectData","viewer","repositories","nodes","className","fallback","exact","path","projects","showLoading","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","Authorization","process","cache","InMemoryCache","AnimationDoneContextProvider","children","contextValue","Provider","value","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d173d6f7.chunk.js","sourcesContent":["import { DefaultTheme } from 'styled-components';\n\nconst Theme: DefaultTheme = {\n  colors: {\n    black: '#24292e',\n    orange: '#C48A5F',\n    white: '#ffffff',\n    blue: '#557DA7',\n    purple: '#706095',\n    pink: '#94525D',\n    green: '#c2eabd',\n  },\n\n  fonts: {\n    monaco: 'Monaco',\n    roboto: 'Roboto',\n  },\n};\n\nexport default Theme;\n","import { createContext } from 'react';\n\nexport const AnimationDoneContext = createContext<{\n  state: boolean;\n  setState: React.Dispatch<React.SetStateAction<boolean>>;\n}>({ state: false, setState: () => {} });\n","import styled from 'styled-components';\n\ninterface StyledNavbarProps {\n  readonly backgroundColor?: string;\n  readonly fontColor?: string;\n}\n\nexport const StyledNavbar = styled.nav<StyledNavbarProps>`\n  background-color: ${(props) =>\n    props?.backgroundColor ? props?.backgroundColor : props.theme.colors.black};\n  color: ${(props) =>\n    props?.fontColor ? props?.fontColor : props.theme.colors.white};\n  padding: 1rem;\n  padding-left: 0;\n  display: flex;\n  font-family: ${(props) => props.theme.fonts.monaco};\n  justify-content: flex-start;\n\n  @media (min-width: 1024px) {\n    justify-content: flex-start;\n    padding-left: 1rem;\n  }\n`;\n","import styled from 'styled-components';\n\ninterface StyledNavLinkProps {\n  readonly fontColor?: string;\n  readonly isActive?: boolean;\n}\n\nexport const StyledNavLink = styled.div<StyledNavLinkProps>`\n  a {\n    color: ${(props) =>\n      props.fontColor && props.isActive\n        ? props.fontColor\n        : props.theme.colors.white};\n    display: flex;\n    font-family: ${(props) => props.theme.fonts.monaco};\n    text-decoration: none;\n    transition: 200ms ease-in-out;\n    margin-left: 2.5rem;\n  }\n\n  a:hover {\n    color: ${(props) => props.fontColor};\n    text-decoration: ${(props) => (props.isActive ? 'none' : 'underline')};\n    cursor: pointer;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\n\nconst useCurrentPathname = (): string => {\n  const location = useLocation();\n  return location.pathname;\n};\n\nexport default useCurrentPathname;\n","import React from 'react';\nimport { NavLink } from '../../../models/NavLink.model';\nimport Theme from '../../styles/theme';\nimport { StyledNavbar } from '../../styles/StyledNavBar/StyledNavbar';\nimport { Link } from 'react-router-dom';\nimport { StyledNavLink } from '../../styles/StyledNavLink/StyledNavLink';\nimport useCurrentPathName from '../../../hooks/useCurrentPath';\n\nconst navLinks: NavLink[] = [\n  { url: '/', label: 'About', isActiveColor: `${Theme.colors.green}` },\n  {\n    url: '/projects',\n    label: 'Projects',\n    isActiveColor: `${Theme.colors.orange}`,\n  },\n  //{ url: '/blog', label: 'Blog', isActiveColor: `${Theme.colors.blue}` },\n];\n\nexport const Navbar: React.FC = () => {\n  const currentURL = useCurrentPathName();\n\n  const generateNavLinks = (navLinks: NavLink[]): JSX.Element[] => {\n    return navLinks?.map((link: NavLink) => {\n      return currentURL === link.url ? (\n        <StyledNavLink\n          theme={Theme}\n          key={link.label + link.url}\n          isActive={true}\n          fontColor={link.isActiveColor}\n        >\n          <Link to={link.url}>{link.label}</Link>\n        </StyledNavLink>\n      ) : (\n        <StyledNavLink\n          theme={Theme}\n          key={link.label + link.url}\n          fontColor={link.isActiveColor}\n        >\n          <Link to={link.url}>{link.label}</Link>\n        </StyledNavLink>\n      );\n    });\n  };\n\n  return (\n    <StyledNavbar theme={Theme} id=\"navbar\" role=\"navigation\">\n      {generateNavLinks(navLinks)}\n    </StyledNavbar>\n  );\n};\n","import { DocumentNode, gql } from '@apollo/client';\n\nexport const REPOS_QUERY: DocumentNode = gql`\n  query GetRepos($firstRepo: Int, $firstLang: Int) {\n    viewer {\n      login\n      repositories(first: $firstRepo) {\n        nodes {\n          name\n          description\n          url\n          updatedAt\n          languages(first: $firstLang) {\n            edges {\n              node {\n                name\n                color\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import { lazy } from 'react';\n\nexport const LazyBlog = lazy(\n  () => import('../components/containers/blog/Blog')\n);\nexport const LazyAbout = lazy(\n  () => import('../components/containers/about/About')\n);\nexport const LazyBlogPost = lazy(\n  () => import('../components/containers/blogpost/BlogPost')\n);\nexport const LazyProjects = lazy(\n  () => import('../components/containers/projects/Projects')\n);\n","import { useQuery } from '@apollo/client';\nimport React, { Suspense, useEffect, useState } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\n\nimport './App.css';\nimport { Navbar } from './components/containers/navbar/Navbar';\nimport { REPOS_QUERY } from './graphql/queries';\nimport {\n  LazyAbout,\n  LazyBlog,\n  LazyBlogPost,\n  LazyProjects,\n} from './helpers/lazyLoading';\nimport {\n  GetRepos,\n  GetRepos_viewer_repositories_nodes,\n} from './models/graphqL/GetRepos';\n\nconst App: React.FC = () => {\n  const [jsonData, setJsonData] = useState<\n    GetRepos_viewer_repositories_nodes[]\n  >([]);\n  const { data, error, loading } = useQuery<GetRepos>(REPOS_QUERY, {\n    variables: {\n      firstRepo: 100,\n      firstLang: 10,\n    },\n  });\n\n  const getJsonData = async () => {\n    const response = await fetch('data.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    });\n    await response\n      .json()\n      .then((jsonProjects: GetRepos_viewer_repositories_nodes[]) =>\n        setJsonData(jsonProjects)\n      );\n  };\n\n  useEffect(() => {\n    getJsonData();\n  }, []);\n\n  const projectData = error ? jsonData : data?.viewer?.repositories?.nodes;\n\n  return (\n    <HashRouter>\n      <div className=\"App\">\n        <header>\n          <Navbar />\n        </header>\n        <main>\n          <Suspense fallback={'lazy...'}>\n            <Switch>\n              <Route exact path=\"/blog/:id\">\n                <LazyBlogPost />\n              </Route>\n              <Route exact path=\"/blog\">\n                <LazyBlog />\n              </Route>\n              <Route exact path=\"/projects\">\n                <LazyProjects projects={projectData} showLoading={loading} />\n              </Route>\n              <Route path=\"/\">\n                <LazyAbout />\n              </Route>\n            </Switch>\n          </Suspense>\n        </main>\n      </div>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import {\n  ApolloClient,\n  InMemoryCache,\n  NormalizedCacheObject,\n} from '@apollo/client';\n\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  uri: 'https://api.github.com/graphql',\n  headers: {\n    Authorization: `Bearer ${process.env.REACT_APP_GH_PA_TOKEN}`,\n  },\n  cache: new InMemoryCache(),\n});\n\nexport default client;\n","import React, { useState } from 'react';\nimport { AnimationDoneContext } from './AnimationDoneContext';\n\nexport const AnimationDoneContextProvider: React.FC = ({ children }) => {\n  const [animationFinished, setAnimationFinished] = useState(false);\n\n  const contextValue = {\n    state: animationFinished,\n    setState: setAnimationFinished,\n  };\n\n  return (\n    <AnimationDoneContext.Provider value={contextValue}>\n      {children}\n    </AnimationDoneContext.Provider>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloProvider } from '@apollo/client';\nimport client from './graphql/client';\nimport { AnimationDoneContextProvider } from './components/context/AnimationDoneContextProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <AnimationDoneContextProvider>\n        <App />\n      </AnimationDoneContextProvider>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}