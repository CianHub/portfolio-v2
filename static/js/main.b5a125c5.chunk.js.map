{"version":3,"sources":["components/styles/theme.ts","components/styles/StyledNavBar/StyledNavbar.tsx","components/styles/StyledNavLink/StyledNavLink.tsx","hooks/useCurrentPath.tsx","components/containers/navbar/Navbar.tsx","graphql/queries.ts","helpers/lazyLoading.ts","App.tsx","reportWebVitals.ts","graphql/client.ts","index.tsx"],"names":["Theme","colors","black","orange","white","blue","purple","pink","green","fonts","monaco","roboto","StyledNavbar","styled","nav","props","backgroundColor","theme","fontColor","StyledNavLink","div","isActive","useCurrentPathname","useLocation","pathname","navLinks","url","label","isActiveColor","Navbar","currentURL","useCurrentPathName","id","role","map","link","to","REPOS_QUERY","gql","LazyBlog","lazy","LazyAbout","LazyBlogPost","LazyProjects","App","useQuery","variables","firstRepo","firstLang","loading","error","message","className","fallback","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","headers","Authorization","process","REACT_APP_GH_PA_TOKEN","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5a125c5.chunk.js","sourcesContent":["import { DefaultTheme } from 'styled-components';\n\nconst Theme: DefaultTheme = {\n  colors: {\n    black: '#24292e',\n    orange: '#C48A5F',\n    white: '#ffffff',\n    blue: '#557DA7',\n    purple: '#706095',\n    pink: '#94525D',\n    green: '#c2eabd',\n  },\n\n  fonts: {\n    monaco: 'Monaco',\n    roboto: 'Roboto',\n  },\n};\n\nexport default Theme;\n","import styled from 'styled-components';\n\ninterface StyledNavbarProps {\n  readonly backgroundColor?: string;\n  readonly fontColor?: string;\n}\n\nexport const StyledNavbar = styled.nav<StyledNavbarProps>`\n  background-color: ${(props) =>\n    props?.backgroundColor ? props?.backgroundColor : props.theme.colors.black};\n  color: ${(props) =>\n    props?.fontColor ? props?.fontColor : props.theme.colors.white};\n  padding: 1rem;\n  display: flex;\n  font-family: ${(props) => props.theme.fonts.monaco};\n  justify-content: space-evenly;\n\n  @media (min-width: 1024px) {\n    justify-content: flex-start;\n  }\n`;\n","import styled from 'styled-components';\n\ninterface StyledNavLinkProps {\n  readonly fontColor?: string;\n  readonly isActive?: boolean;\n}\n\nexport const StyledNavLink = styled.div<StyledNavLinkProps>`\n  a {\n    color: ${(props) =>\n      props.fontColor && props.isActive\n        ? props.fontColor\n        : props.theme.colors.white};\n    display: flex;\n    font-family: ${(props) => props.theme.fonts.monaco};\n    text-decoration: none;\n    transition: 200ms ease-in-out;\n    margin-left: 0;\n  }\n\n  a:hover {\n    color: ${(props) => props.fontColor};\n    text-decoration: ${(props) => (props.isActive ? 'none' : 'underline')};\n    cursor: pointer;\n  }\n\n  @media (min-width: 1024px) {\n    margin-left: 2.5rem;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\n\nconst useCurrentPathname = (): string => {\n  const location = useLocation();\n  return location.pathname;\n};\n\nexport default useCurrentPathname;\n","import React from 'react';\nimport { NavLink } from '../../../models/NavLink.model';\nimport Theme from '../../styles/theme';\nimport { StyledNavbar } from '../../styles/StyledNavBar/StyledNavbar';\nimport { Link } from 'react-router-dom';\nimport { StyledNavLink } from '../../styles/StyledNavLink/StyledNavLink';\nimport useCurrentPathName from '../../../hooks/useCurrentPath';\n\nconst navLinks: NavLink[] = [\n  { url: '/', label: 'About', isActiveColor: `${Theme.colors.green}` },\n  {\n    url: '/projects',\n    label: 'Projects',\n    isActiveColor: `${Theme.colors.orange}`,\n  },\n  { url: '/blog', label: 'Blog', isActiveColor: `${Theme.colors.blue}` },\n];\n\nexport const Navbar: React.FC = () => {\n  const currentURL = useCurrentPathName();\n\n  const generateNavLinks = (navLinks: NavLink[]): JSX.Element[] => {\n    return navLinks?.map((link: NavLink) => {\n      return currentURL === link.url ? (\n        <StyledNavLink\n          theme={Theme}\n          key={link.label + link.url}\n          isActive={true}\n          fontColor={link.isActiveColor}\n        >\n          <Link to={link.url}>{link.label}</Link>\n        </StyledNavLink>\n      ) : (\n        <StyledNavLink\n          theme={Theme}\n          key={link.label + link.url}\n          fontColor={link.isActiveColor}\n        >\n          <Link to={link.url}>{link.label}</Link>\n        </StyledNavLink>\n      );\n    });\n  };\n\n  return (\n    <StyledNavbar theme={Theme} id=\"navbar\" role=\"navbar\">\n      {generateNavLinks(navLinks)}\n    </StyledNavbar>\n  );\n};\n","import { DocumentNode, gql } from '@apollo/client';\n\nexport const REPOS_QUERY: DocumentNode = gql`\n  query GetRepos($firstRepo: Int, $firstLang: Int) {\n    viewer {\n      login\n      repositories(first: $firstRepo) {\n        nodes {\n          name\n          description\n          url\n          updatedAt\n          languages(first: $firstLang) {\n            edges {\n              node {\n                name\n                color\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import { lazy } from 'react';\n\nexport const LazyBlog = lazy(\n  () => import('../components/containers/blog/Blog')\n);\nexport const LazyAbout = lazy(\n  () => import('../components/containers/about/About')\n);\nexport const LazyBlogPost = lazy(\n  () => import('../components/containers/blogpost/BlogPost')\n);\nexport const LazyProjects = lazy(\n  () => import('../components/containers/projects/Projects')\n);\n","import { useQuery } from '@apollo/client';\nimport React, { Suspense } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport './App.css';\nimport { Navbar } from './components/containers/navbar/Navbar';\nimport { REPOS_QUERY } from './graphql/queries';\nimport {\n  LazyAbout,\n  LazyBlog,\n  LazyBlogPost,\n  LazyProjects,\n} from './helpers/lazyLoading';\nimport { GetRepos } from './models/graphqL/GetRepos';\n\nconst App: React.FC = () => {\n  const { loading, error } = useQuery<GetRepos>(REPOS_QUERY, {\n    variables: {\n      firstRepo: 100,\n      firstLang: 10,\n    },\n  });\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>{error.message}</div>;\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <header>\n          <Navbar />\n        </header>\n        <main>\n          <Suspense fallback={'lazy...'}>\n            <Switch>\n              <Route exact path=\"/blog/:id\">\n                <LazyBlogPost />\n              </Route>\n              <Route exact path=\"/blog\">\n                <LazyBlog />\n              </Route>\n              <Route exact path=\"/projects\">\n                <LazyProjects />\n              </Route>\n              <Route path=\"/\">\n                <LazyAbout />\n              </Route>\n            </Switch>\n          </Suspense>\n        </main>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import {\n  ApolloClient,\n  InMemoryCache,\n  NormalizedCacheObject,\n} from '@apollo/client';\n\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  uri: 'https://api.github.com/graphql',\n  headers: {\n    Authorization: `bearer ${process.env.REACT_APP_GH_PA_TOKEN}`,\n  },\n  cache: new InMemoryCache(),\n});\n\nexport default client;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloProvider } from '@apollo/client';\nimport client from './graphql/client';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}