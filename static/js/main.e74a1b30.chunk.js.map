{"version":3,"sources":["components/containers/navbar/Navbar.tsx","graphql/queries.ts","helpers/lazyLoading.ts","App.tsx","reportWebVitals.ts","graphql/client.ts","index.tsx"],"names":["Navbar","REPOS_QUERY","gql","LazyBlog","lazy","LazyAbout","LazyBlogPost","LazyProjects","App","useQuery","variables","firstRepo","firstLang","loading","error","message","className","fallback","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","headers","Authorization","process","REACT_APP_GH_PA_TOKEN","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAEaA,G,MAAmB,WAC9B,OAAO,2C,ofCDF,IAAMC,EAA4BC,cAAH,KCAzBC,EAAWC,gBACtB,kBAAM,gCAEKC,EAAYD,gBACvB,kBAAM,gCAEKE,EAAeF,gBAC1B,kBAAM,gCAEKG,EAAeH,gBAC1B,kBAAM,gCC2COI,EAxCO,WAAO,IAAD,EACCC,mBAAmBR,EAAa,CACzDS,UAAW,CACTC,UAAW,IACXC,UAAW,MAHPC,EADkB,EAClBA,QAASC,EADS,EACTA,MAOjB,OAAID,EAAgB,6CAChBC,EAAc,8BAAMA,EAAMC,UAG5B,cAAC,IAAD,UACE,sBAAKC,UAAU,MAAf,UACE,iCACE,cAAC,EAAD,MAEF,+BACE,cAAC,WAAD,CAAUC,SAAU,UAApB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,YAAlB,SACE,cAACb,EAAD,MAEF,cAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,QAAlB,SACE,cAAChB,EAAD,MAEF,cAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,YAAlB,SACE,cAACZ,EAAD,MAEF,cAAC,IAAD,CAAOY,KAAK,IAAZ,SACE,cAACd,EAAD,mBC/BDe,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCKCQ,EARqC,IAAIC,eAAa,CACnEC,IAAK,iCACLC,QAAS,CACPC,cAAc,UAAD,OAAYC,mIAAYC,wBAEvCC,MAAO,IAAIC,kBCHbC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,iBAAD,CAAgBX,OAAQA,EAAxB,SACE,cAAC,EAAD,QAGJY,SAASC,eAAe,SAG1BtB,M","file":"static/js/main.e74a1b30.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Navbar: React.FC = () => {\n  return <nav>Navbar</nav>;\n};\n","import { DocumentNode, gql } from '@apollo/client';\n\nexport const REPOS_QUERY: DocumentNode = gql`\n  query GetRepos($firstRepo: Int, $firstLang: Int) {\n    viewer {\n      login\n      repositories(first: $firstRepo) {\n        nodes {\n          name\n          description\n          url\n          updatedAt\n          languages(first: $firstLang) {\n            edges {\n              node {\n                name\n                color\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import { lazy } from 'react';\n\nexport const LazyBlog = lazy(\n  () => import('../components/containers/blog/Blog')\n);\nexport const LazyAbout = lazy(\n  () => import('../components/containers/about/About')\n);\nexport const LazyBlogPost = lazy(\n  () => import('../components/containers/blogpost/BlogPost')\n);\nexport const LazyProjects = lazy(\n  () => import('../components/containers/projects/Projects')\n);\n","import { useQuery } from '@apollo/client';\nimport React, { Suspense } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport './App.css';\nimport { Navbar } from './components/containers/navbar/Navbar';\nimport { REPOS_QUERY } from './graphql/queries';\nimport {\n  LazyAbout,\n  LazyBlog,\n  LazyBlogPost,\n  LazyProjects,\n} from './helpers/lazyLoading';\nimport { GetRepos } from './models/graphqL/GetRepos';\n\nconst App: React.FC = () => {\n  const { loading, error } = useQuery<GetRepos>(REPOS_QUERY, {\n    variables: {\n      firstRepo: 100,\n      firstLang: 10,\n    },\n  });\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>{error.message}</div>;\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <header>\n          <Navbar />\n        </header>\n        <main>\n          <Suspense fallback={'lazy...'}>\n            <Switch>\n              <Route exact path=\"/blog/:id\">\n                <LazyBlogPost />\n              </Route>\n              <Route exact path=\"/blog\">\n                <LazyBlog />\n              </Route>\n              <Route exact path=\"/projects\">\n                <LazyProjects />\n              </Route>\n              <Route path=\"/\">\n                <LazyAbout />\n              </Route>\n            </Switch>\n          </Suspense>\n        </main>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import {\n  ApolloClient,\n  InMemoryCache,\n  NormalizedCacheObject,\n} from '@apollo/client';\n\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  uri: 'https://api.github.com/graphql',\n  headers: {\n    Authorization: `bearer ${process.env.REACT_APP_GH_PA_TOKEN}`,\n  },\n  cache: new InMemoryCache(),\n});\n\nexport default client;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloProvider } from '@apollo/client';\nimport client from './graphql/client';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}